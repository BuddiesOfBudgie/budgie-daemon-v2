/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was DisplaySchema.Output.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "OutputAdaptorGen.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class OutputAdaptor
 */

OutputAdaptor::OutputAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

OutputAdaptor::~OutputAdaptor()
{
    // destructor
}

uint OutputAdaptor::adaptiveSync() const
{
    // get the value of property AdaptiveSync
    return qvariant_cast< uint >(parent()->property("AdaptiveSync"));
}

QString OutputAdaptor::description() const
{
    // get the value of property Description
    return qvariant_cast< QString >(parent()->property("Description"));
}

bool OutputAdaptor::enabled() const
{
    // get the value of property Enabled
    return qvariant_cast< bool >(parent()->property("Enabled"));
}

int OutputAdaptor::height() const
{
    // get the value of property Height
    return qvariant_cast< int >(parent()->property("Height"));
}

QString OutputAdaptor::make() const
{
    // get the value of property Make
    return qvariant_cast< QString >(parent()->property("Make"));
}

QString OutputAdaptor::mirrorOf() const
{
    // get the value of property MirrorOf
    return qvariant_cast< QString >(parent()->property("MirrorOf"));
}

QString OutputAdaptor::model() const
{
    // get the value of property Model
    return qvariant_cast< QString >(parent()->property("Model"));
}

QString OutputAdaptor::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

bool OutputAdaptor::primary() const
{
    // get the value of property Primary
    return qvariant_cast< bool >(parent()->property("Primary"));
}

double OutputAdaptor::refreshRate() const
{
    // get the value of property RefreshRate
    return qvariant_cast< double >(parent()->property("RefreshRate"));
}

double OutputAdaptor::scale() const
{
    // get the value of property Scale
    return qvariant_cast< double >(parent()->property("Scale"));
}

QString OutputAdaptor::serial() const
{
    // get the value of property Serial
    return qvariant_cast< QString >(parent()->property("Serial"));
}

short OutputAdaptor::transform() const
{
    // get the value of property Transform
    return qvariant_cast< short >(parent()->property("Transform"));
}

int OutputAdaptor::width() const
{
    // get the value of property Width
    return qvariant_cast< int >(parent()->property("Width"));
}

int OutputAdaptor::x() const
{
    // get the value of property X
    return qvariant_cast< int >(parent()->property("X"));
}

int OutputAdaptor::y() const
{
    // get the value of property Y
    return qvariant_cast< int >(parent()->property("Y"));
}

QStringList OutputAdaptor::GetAvailableModes()
{
    // handle method call org.buddiesofbudgie.BudgieDaemonX.Output.GetAvailableModes
    QStringList modePaths{};
    QMetaObject::invokeMethod(parent(), "GetAvailableModes", Q_RETURN_ARG(QStringList, modePaths));
    return modePaths;
}

QString OutputAdaptor::GetCurrentMode()
{
    // handle method call org.buddiesofbudgie.BudgieDaemonX.Output.GetCurrentMode
    QString modePath{};
    QMetaObject::invokeMethod(parent(), "GetCurrentMode", Q_RETURN_ARG(QString, modePath));
    return modePath;
}

QString OutputAdaptor::GetModeNodePath(int width, int height, double refreshRate)
{
    // handle method call org.buddiesofbudgie.BudgieDaemonX.Output.GetModeNodePath
    QString objectPath{};
    QMetaObject::invokeMethod(parent(), "GetModeNodePath", Q_RETURN_ARG(QString, objectPath), Q_ARG(int, width), Q_ARG(int, height), Q_ARG(double, refreshRate));
    return objectPath;
}

